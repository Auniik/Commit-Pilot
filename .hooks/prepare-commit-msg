#!/bin/bash

COMMIT_MSG_FILE=$1
original_msg=$(cat "$COMMIT_MSG_FILE")
msg_lower=$(echo "$original_msg" | tr '[:upper:]' '[:lower:]')

jira_url="https://portonics.atlassian.net"

jira_user="__JIRA_USER__"
jira_token="__JIRA_API_TOKEN__"
provider="__PROVIDER__"
enable_timelog="__ENABLE_TIMELOG__"


# --------------------------
# Fetch JIRA JSON once
# --------------------------
fetch_jira_issues_json() {
  local jql="assignee=currentUser() AND resolution=Unresolved ORDER BY updated DESC"

  curl -s -u "$jira_user:$jira_token" \
    -G --data-urlencode "jql=$jql" \
    --data-urlencode "fields=key,summary,status,timetracking" \
    "$jira_url/rest/api/2/search"
}

# --------------------------
# Convert issues to tab-separated values
# --------------------------
parse_issues_to_tsv() {
  jq -r '.issues[] | [
    .key,
    .fields.status.name,
    ((.fields.timetracking.remainingEstimate // "‚Äì") + " / " + (.fields.timetracking.originalEstimate // "‚Äì")),
    .fields.summary
  ] | @tsv' <<< "$1"
}

# --------------------------
# Show ticket list using fzf
# --------------------------
select_jira_ticket_from_tsv() {
  fzf --prompt="üéüÔ∏è  Select JIRA ticket: " <<< "$1" | column -t -s $'\t'
}

# --------------------------
# Extract ticket details from JSON
# --------------------------
extract_ticket_details() {
  local json="$1"
  local key="$2"

  jq -r --arg key "$key" '
    .issues[] | select(.key == $key) |
    [
      .key,
      .fields.status.name,
      ((.fields.timetracking.remainingEstimate // "‚Äì") + " / " + (.fields.timetracking.originalEstimate // "‚Äì")),
      .fields.summary
    ] | @tsv' <<< "$json"
}


# =====================
# Prompt user for Ticket ID
# =====================
ticket_id=""

if [[ "$provider" == "JIRA" ]]; then
  if command -v fzf > /dev/null && command -v jq > /dev/null; then
    #selected_line=$(choose_jira_ticket_interactively)
    jira_json=$(fetch_jira_issues_json)
    ticket_list=$(parse_issues_to_tsv "$jira_json")
    selected_line=$(select_jira_ticket_from_tsv "$ticket_list")

  if [[ -z "$selected_line" ]]; then
    echo "‚ö†Ô∏è  Ticket selection was cancelled."
  else
    clean_line=$(echo "$selected_line" | sed 's/^[[:space:]]*//;s/[[:space:]]*$//')
    ticket_id=$(echo "$clean_line" | awk '{print $1}')
    raw_line=$(echo "$ticket_list" | grep "^$ticket_id")

    if [[ -n "$raw_line" ]]; then
      IFS=$'\t' read -r ticket_id status remaining_original summary <<< "$raw_line"
      rem_time=$(echo "$remaining_original" | cut -d'/' -f1 | xargs)
    fi
  fi

  else
   echo "‚ö†Ô∏è  Pro tip: Install fzf and jq for an epic, interactive ticket-picking experience! üéüÔ∏è‚ú®"
  fi
fi

if [[ -z "$ticket_id" ]]; then
  echo -n "ü´¥  Enter Ticket / Issue ID manually (enter to skip): "
  read input < /dev/tty
  ticket_id=$(echo "$input" | tr '[:lower:]' '[:upper:]')
fi


# =====================
# Emoji Picker Based on Message Content
# =====================
chosen_emoji="üí¨"

if echo "$msg_lower" | grep -q "add\|added"; then
  chosen_emoji="‚ú®"
elif echo "$msg_lower" | grep -q "fix\|fixed"; then
  chosen_emoji="üêõ"
elif echo "$msg_lower" | grep -q "remove\|removed\|delete"; then
  chosen_emoji="‚ö∞Ô∏è"
elif echo "$msg_lower" | grep -q "doc\|docs"; then
  chosen_emoji="üìù"
elif echo "$msg_lower" | grep -q "refactor"; then
  chosen_emoji="‚ôªÔ∏è"
elif echo "$msg_lower" | grep -q "test\|tests"; then
  chosen_emoji="‚úÖ"
elif echo "$msg_lower" | grep -q "deploy\|release\|publish"; then
  chosen_emoji="üöÄ"
elif echo "$msg_lower" | grep -q "config"; then
  chosen_emoji="üõ†Ô∏è"
elif echo "$msg_lower" | grep -q "initial\|init"; then
  chosen_emoji="üéâ"
elif echo "$msg_lower" | grep -q "update\|updated"; then
  chosen_emoji="üîß"
elif echo "$msg_lower" | grep -q "clean"; then
  chosen_emoji="üßπ"
elif echo "$msg_lower" | grep -q "ci\|cd"; then
  chosen_emoji="üåÄ"
elif echo "$msg_lower" | grep -q "merge"; then
  chosen_emoji="üîÄ"
elif echo "$msg_lower" | grep -q "hotfix"; then
  chosen_emoji="üî•"
elif echo "$msg_lower" | grep -q "rollback"; then
  chosen_emoji="‚è™"
elif echo "$msg_lower" | grep -q "performance\|optimize\|perf"; then
  chosen_emoji="‚ö°"
elif echo "$msg_lower" | grep -q "feature"; then
  chosen_emoji="üåü"
elif echo "$msg_lower" | grep -q "build"; then
  chosen_emoji="üèóÔ∏è"
elif echo "$msg_lower" | grep -q "debug"; then
  chosen_emoji="üîç"
elif echo "$msg_lower" | grep -q "log\|logging"; then
  chosen_emoji="üóíÔ∏è"
elif echo "$msg_lower" | grep -q "error\|exception"; then
  chosen_emoji="üö®"
elif echo "$msg_lower" | grep -q "docker"; then
  chosen_emoji="üê≥"
elif echo "$msg_lower" | grep -q "pipeline"; then
  chosen_emoji="üîÉ"
elif echo "$msg_lower" | grep -q "script"; then
  chosen_emoji="üìú"
elif echo "$msg_lower" | grep -q "env"; then
  chosen_emoji="üå±"
elif echo "$msg_lower" | grep -q "revert"; then
  chosen_emoji="‚è™"
elif echo "$msg_lower" | grep -q "bootstrap"; then
  chosen_emoji="üöß"
elif echo "$msg_lower" | grep -q "secret"; then
  chosen_emoji="üîê"
elif echo "$msg_lower" | grep -q "cache"; then
  chosen_emoji="üíæ"
elif echo "$msg_lower" | grep -q "redis"; then
  chosen_emoji="üß†"
elif echo "$msg_lower" | grep -q "db\|database"; then
  chosen_emoji="üóÉÔ∏è"
elif echo "$msg_lower" | grep -q "query"; then
  chosen_emoji="üîç"
elif echo "$msg_lower" | grep -q "api\|endpoint"; then
  chosen_emoji="üì°"
elif echo "$msg_lower" | grep -q "sync"; then
  chosen_emoji="üîÑ"
elif echo "$msg_lower" | grep -q "mapping"; then
  chosen_emoji="üó∫Ô∏è"
elif echo "$msg_lower" | grep -q "permission"; then
  chosen_emoji="üîë"
elif echo "$msg_lower" | grep -q "auth"; then
  chosen_emoji="üõ°Ô∏è"
elif echo "$msg_lower" | grep -q "validator"; then
  chosen_emoji="‚úîÔ∏è"
elif echo "$msg_lower" | grep -q "schema"; then
  chosen_emoji="üìê"
elif echo "$msg_lower" | grep -q "search"; then
  chosen_emoji="üîé"
elif echo "$msg_lower" | grep -q "upload"; then
  chosen_emoji="üì§"
elif echo "$msg_lower" | grep -q "download"; then
  chosen_emoji="üì•"
elif echo "$msg_lower" | grep -q "image"; then
  chosen_emoji="üñºÔ∏è"
elif echo "$msg_lower" | grep -q "format"; then
  chosen_emoji="üßæ"
elif echo "$msg_lower" | grep -q "handler"; then
  chosen_emoji="üéõÔ∏è"
elif echo "$msg_lower" | grep -q "job"; then
  chosen_emoji="üßë‚Äçüè≠"
elif echo "$msg_lower" | grep -q "task"; then
  chosen_emoji="üìã"
fi

# =====================
# Final Formatting
# =====================
capitalize_first_letter() {
  first_char=$(echo "$1" | cut -c1 | tr '[:lower:]' '[:upper:]')
  rest=$(echo "$1" | cut -c2-)
  echo "$first_char$rest"
}

msg_no_emoji=$(echo "$original_msg" | sed -E 's/^[[:space:]]*[^[:alnum:][:space:]]+[[:space:]]*//')
capitalized_msg=$(capitalize_first_letter "$msg_no_emoji")
final_msg="$chosen_emoji $capitalized_msg"

if [[ "$provider" == "JIRA" && "$enable_timelog" == "true" ]]; then
  if [[ -n "$ticket_id" ]]; then
    final_msg="[$ticket_id] $final_msg"

    if [[ ! "$ticket_id" =~ ^[A-Z]+-[0-9]+$ ]]; then
      echo "‚ö†Ô∏è  Warning: Ticket ID doesn't match expected format (e.g., ABC-123)"
    else

      # Get the last commit time (today only)
      last_commit_epoch=$(git log --since=midnight --pretty=format:"%ct" -n 1)

      if [[ -n "$last_commit_epoch" ]]; then
        now_epoch=$(date +%s)
        diff_sec=$((now_epoch - last_commit_epoch))

        h=$((diff_sec / 3600))
        m=$(((diff_sec % 3600) / 60))

        suggested_time=""
        [[ $h -gt 0 ]] && suggested_time="${h}h"
        [[ $m -gt 0 ]] && suggested_time="${suggested_time} ${m}m"
        suggested_time=$(echo "$suggested_time" | sed 's/^ *//;s/ *$//')

        if [[ -n "$suggested_time" ]]; then
          echo ""
          echo "üìÖ  Last commit:  ‚è±Ô∏è  $suggested_time ago"
          echo "üëâ  Log it? Or was that another 'meeting'? ü§∑‚Äç‚ôÇÔ∏è"
          echo ""
        fi
      fi

      if [[ -n "$rem_time" ]]; then
        echo "üßÆ  Remaining time for $ticket_id:  $rem_time"
      fi
      echo -n "‚è±Ô∏è  Time spent on this task (e.g., 5m, 30m, 1h, 2h 30m, 1w 2d): "

      read time_spent < /dev/tty

      # Validate time format using regex
      if [[ -n "$time_spent" && "$time_spent" =~ ^([0-9]+w\s*)?([0-9]+d\s*)?([0-9]+h\s*)?([0-9]+m\s*)?$ ]]; then
        echo ""
        echo "‚è≥  Logging $time_spent to $ticket_id with commit message..."

        comment_json=$(jq -n \
          --arg time_spent "$time_spent" \
          --arg msg "$final_msg" \
          '{
            "timeSpent": $time_spent,
            "comment": {
              "type": "doc",
              "version": 1,
              "content": [{
                "type": "paragraph",
                "content": [{
                  "type": "text",
                  "text": $msg
                }]
              }]
            }
          }')

        http_status=$(curl -s -w "%{http_code}" -o /tmp/jira_worklog_response.json \
          -X POST \
          -u "$jira_user:$jira_token" \
          -H "Content-Type: application/json" \
          -d "$comment_json" \
          "$jira_url/rest/api/3/issue/$ticket_id/worklog")

        if [[ "$http_status" == "201" ]]; then
          echo "‚úÖ  Logged $time_spent to $ticket_id with message: \"$final_msg\""
        else
          echo "‚ùå  Failed to log time to $ticket_id (HTTP $http_status)"
          echo ""
          echo "üëâ  Don't forget to log manually : https://portonics.atlassian.net/browse/$ticket_id"
        fi
      else
        echo "‚ùå  Woops! Missing or invalid time format!"
        echo ""
        echo "üëâ  Don't forget to log manually : https://portonics.atlassian.net/browse/$ticket_id"
      fi
    fi
  fi
fi

if [[ "$provider" == "GitHub" && -n "$ticket_id" ]]; then
  final_msg="[$ticket_id] $final_msg"
fi

echo ""

echo "$final_msg" > "$COMMIT_MSG_FILE"
